#ifndef _MODLEDLAMPH_
#define _MODLEDLAMPH_

/* 事件类型 */
enum LAMP_EVENTTYPE
{
    LAMP_EVENTTYPE_NONE = 0,
    LAMP_EVENTTYPE_INCALL, /* 来电 */
    LAMP_EVENTTYPE_HOLD,                /* */
    LAMP_EVENTTYPE_TALKING,             /* 通话 */
    LAMP_EVENTTYPE_MESSAGE,             /* 新消息来临 */
    LAMP_EVENTTYPE_MISSCALL, /*未接来电 */
    LAMP_EVENTTYPE_ACDALERT, /* acd ALERT状态闪灯 */
    LAMP_EVENTTYPE_MUTE_POWER_LIGHT,

    LAMP_EVENTTYPE_POWERSAVING,  /*进入节电模式闪灯*/

    LAMP_EVENTTYPE_COMMON,

    LAMP_EVENTTYPE_SPEAKER,
    LAMP_EVENTTYPE_HEADSET,
    LAMP_EVENTTYPE_SMS,
    LAMP_EVENTTYPE_MUTE,
    LAMP_EVENTTYPE_BACKLIGHT,
    LAMP_EVENTTYPE_AUTOPFINISH, /* AutopFinish */
    LAMP_EVENTTYPE_LINEKEY1,
    LAMP_EVENTTYPE_LINEKEY2,
    LAMP_EVENTTYPE_LINEKEY3,
    LAMP_EVENTTYPE_LINEKEY4,
    LAMP_EVENTTYPE_LINEKEY5,
    LAMP_EVENTTYPE_LINEKEY6,
    LAMP_EVENTTYPE_MEMORYKEYRED1,
    LAMP_EVENTTYPE_MEMORYKEYRED2,
    LAMP_EVENTTYPE_MEMORYKEYRED3,
    LAMP_EVENTTYPE_MEMORYKEYRED4,
    LAMP_EVENTTYPE_MEMORYKEYRED5,
    LAMP_EVENTTYPE_MEMORYKEYRED6,
    LAMP_EVENTTYPE_MEMORYKEYRED7,
    LAMP_EVENTTYPE_MEMORYKEYRED8,
    LAMP_EVENTTYPE_MEMORYKEYRED9,
    LAMP_EVENTTYPE_MEMORYKEYRED10,
    LAMP_EVENTTYPE_MEMORYKEYGREEN1,
    LAMP_EVENTTYPE_MEMORYKEYGREEN2,
    LAMP_EVENTTYPE_MEMORYKEYGREEN3,
    LAMP_EVENTTYPE_MEMORYKEYGREEN4,
    LAMP_EVENTTYPE_MEMORYKEYGREEN5,
    LAMP_EVENTTYPE_MEMORYKEYGREEN6,
    LAMP_EVENTTYPE_MEMORYKEYGREEN7,
    LAMP_EVENTTYPE_MEMORYKEYGREEN8,
    LAMP_EVENTTYPE_MEMORYKEYGREEN9,
    LAMP_EVENTTYPE_MEMORYKEYGREEN10,
    LAMP_EVENTTYPE_DSSKEYRED1,
    LAMP_EVENTTYPE_DSSKEYRED2,
    LAMP_EVENTTYPE_DSSKEYRED3,
    LAMP_EVENTTYPE_DSSKEYRED4,
    LAMP_EVENTTYPE_DSSKEYRED5,
    LAMP_EVENTTYPE_DSSKEYRED6,
    LAMP_EVENTTYPE_DSSKEYRED7,
    LAMP_EVENTTYPE_DSSKEYRED8,
    LAMP_EVENTTYPE_DSSKEYRED9,
    LAMP_EVENTTYPE_DSSKEYRED10,
    LAMP_EVENTTYPE_DSSKEYGREEN1,
    LAMP_EVENTTYPE_DSSKEYGREEN2,
    LAMP_EVENTTYPE_DSSKEYGREEN3,
    LAMP_EVENTTYPE_DSSKEYGREEN4,
    LAMP_EVENTTYPE_DSSKEYGREEN5,
    LAMP_EVENTTYPE_DSSKEYGREEN6,
    LAMP_EVENTTYPE_DSSKEYGREEN7,
    LAMP_EVENTTYPE_DSSKEYGREEN8,
    LAMP_EVENTTYPE_DSSKEYGREEN9,
    LAMP_EVENTTYPE_DSSKEYGREEN10,
    LAMP_EVENTTYPE_DSSKEYORANGE1,
    LAMP_EVENTTYPE_DSSKEYORANGE2,
    LAMP_EVENTTYPE_DSSKEYORANGE3,
    LAMP_EVENTTYPE_DSSKEYORANGE4,
    LAMP_EVENTTYPE_DSSKEYORANGE5,
    LAMP_EVENTTYPE_DSSKEYORANGE6,
    LAMP_EVENTTYPE_DSSKEYORANGE7,
    LAMP_EVENTTYPE_DSSKEYORANGE8,
    LAMP_EVENTTYPE_DSSKEYORANGE9,
    LAMP_EVENTTYPE_DSSKEYORANGE10,

    LAMP_EVENTTYPE_CUSTOM,

    LAMP_EVENTTYPE_VIDEO_INCALL,    /* 视频来电来电 */
    LAMP_EVENTTYPE_VIDEO_HOLD,      // 视频hold
    LAMP_EVENTTYPE_VIDEO_MUTE,      // 视频Mute
    LAMP_EVENTTYPE_VIDEO_TALKING,   /*通话 */
    LAMP_EVENTTYPE_VIDEO_IDLE,
};

//初始化接口
void ledlamp_Init();

/*
外界消息调用接口
@param:
nEventID: 传入的事件/消息ID
bRegister: 是否为注册事件
*/
bool ledlamp_PostEvent(LAMP_EVENTTYPE eEventType, bool bRegister = true);

/*
自定义灯状态:
@param:
nLightNum: 灯号
nLightTime: 亮时间 (详见下方介绍)
nDarkTime: 暗时间 (详见下方介绍)
@brief:
(-1, -1): 关灯
(0, 0): 开灯
(正数, 正数): 闪烁
其它: 不处理

开灯/闪烁时, 会自动注册LAMP_EVENTTYPE_CUSTOM消息
关灯时, 会自动解注册LAMP_EVENTTYPE_CUSTOM消息

是否立即见效, 得看配置文件中Custom的优先级
*/
bool ledlamp_PostCustomEvent(int nLightNum, int nLightTime, int nDarkTime, bool bGreen = false,
                             bool bRed = false);

bool ledlamp_PostDsskeyEvent(int iIndex, int nLightTime = -1, int nDarkTime = -1,
                             bool bGreen = true, bool bRed = false);

//液晶控制类型
enum LIGHT_Type
{
    LT_OFF = 0,
    LT_GREEN_ON,
    LT_RED_ON,
    LT_RED_GREEN_ON,
    LT_RED_FLASH_1,
    LT_RED_FLASH_2,
    LT_RED_FLASH_3,
    LT_RED_FLASH_4,
    LT_GREEN_FLASH_1,//快
    LT_GREEN_FLASH_2,
    LT_GREEN_FLASH_3,
    LT_GREEN_FLASH_4,//慢
    LT_RED_GREEN_FLASH_1,
    LT_RED_GREEN_FLASH_2,
    LT_RED_GREEN_FLASH_3,
    LT_RED_GREEN_FLASH_4,

    LT_NONE = 0xff,
};



/*******************************************************************
** 函数描述: 设置ledlamp对led灯的控制权
** 参数：    bIsOn：设置ledlamp模块是否控制灯的实际状态
                    0-断开控制，所有时间对灯的实际状态不生效(并不影响调用当时灯的实际状态)
                    1-打开控制，重新控制灯，并执行所有灯事件
** 返回:     true
********************************************************************/
bool ledlamp_SwitchControl(bool bIsOn);

// 返回Lamp ID
int ledlamp_GetLampID(LAMP_EVENTTYPE eEventType);
#endif
