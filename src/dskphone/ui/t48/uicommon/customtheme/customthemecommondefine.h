#ifndef __CUSTOMTHEME_COMMON_DEFINE_H__
#define __CUSTOMTHEME_COMMON_DEFINE_H__

enum FONT_STATUS
{
    FONT_NORMAL = 1,
    FONT_ACTIVE,
};

enum CUSTOM_FONT_OBJECT_ID
{
    CUSTOM_FONT_ID_COMMON_TEXT = 1,
    CUSTOM_FONT_ID_COMMON_FORGROUND_TEXT,
    CUSTOM_FONT_ID_COMMON_BUTTON,

    CUSTOM_FONT_ID_TITLEBAR_NORMAL,
    CUSTOM_FONT_ID_TITLEBAR_ACCOUNT,
    CUSTOM_FONT_ID_TITLEBAR_TIME,
    CUSTOM_FONT_ID_TITLEBAR_TITLE,
    CUSTOM_FONT_ID_TITLEBAR_HINT,
    CUSTOM_FONT_ID_TITLEBAR_FOCUS_TITLE,

    CUSTOM_FONT_ID_LINEKEY_NORMAL,
    CUSTOM_FONT_ID_LINEKEY_HIGHLIGHT,
    CUSTOM_FONT_ID_LINEKEY_USING,
    CUSTOM_FONT_ID_LINEKEY_DISABLE,

    CUSTOM_FONT_ID_SOFAKEY_NORMAL,
    CUSTOM_FONT_ID_SOFAKEY_IDLE,

    CUSTOM_FONT_ID_IDLE_LABEL,
    CUSTOM_FONT_ID_IDLE_ACD_STATUS,
    CUSTOM_FONT_ID_IDLE_DND,
    CUSTOM_FONT_ID_IDLE_CLOCK_DATE,
    CUSTOM_FONT_ID_IDLE_CLOCK_AMPM,
    CUSTOM_FONT_ID_IDLE_CLOCK_TIME,

    CUSTOM_FONT_ID_MENU_NORMAL,

    CUSTOM_FONT_ID_DIRECTORY_NORMAL,
    CUSTOM_FONT_ID_DIRECTORY_FOCUS,

    CUSTOM_FONT_ID_SETTING_NORMAL,
    CUSTOM_FONT_ID_SETTING_FOCUS,

    CUSTOM_FONT_ID_LINESELECT_NORMAL,
    CUSTOM_FONT_ID_LINESELECT_FOCUS,

    CUSTOM_FONT_ID_TALK_NORMAL,
    CUSTOM_FONT_ID_TALK_NORMAL_TIMEPIECE,
    CUSTOM_FONT_ID_TALK_NORMAL_INCOMMING_TIP,
    CUSTOM_FONT_ID_TALK_NORMAL_HINTTIP,
    CUSTOM_FONT_ID_TALK_NORMAL_HOLDTIP_WITHOUTPHOTO,
    CUSTOM_FONT_ID_TALK_NORMAL_TRANSFTIP_WITHOUTPHOTO,
    CUSTOM_FONT_ID_TALK_NORMAL_HOLDTIP,
    CUSTOM_FONT_ID_TALK_SESSITON_TITLE_NORMAL,
    CUSTOM_FONT_ID_TALK_SESSITON_TITLE_FOCUS,
    CUSTOM_FONT_ID_TALK_CONFERENCE_LABEL,
    CUSTOM_FONT_ID_TALK_CONFERENCE_HINT_TIP,
    CUSTOM_FONT_ID_TALK_CONFERENCEMANAGE_NORMAL,
    CUSTOM_FONT_ID_TALK_RTPSTATUS,
    CUSTOM_FONT_ID_TALK_SEARCH_NORMAL,
    CUSTOM_FONT_ID_TALK_DIALING_ERROR_INFO,
    CUSTOM_FONT_ID_TALK_CONTACT_INFO_NAME,
    CUSTOM_FONT_ID_TALK_CONTACT_INFO_NUMBER,
    CUSTOM_FONT_ID_TALK_CONTACT_INFO_INFO,
};

struct CustomFontData
{
    unsigned int m_nFontSize;
    QColor       m_colorNormal;
    QColor       m_colorActive;
    bool         m_bshowShadow;

    CustomFontData()
    {
        Reset();
    }

    void Reset()
    {
        m_nFontSize = 0;
        m_colorNormal = QColor(0, 0, 0);
        m_colorActive = QColor(0, 0, 0);
        m_bshowShadow = false;
    }
};

typedef YLHashMap<int, CustomFontData> MAP_CUSTOMTHEME_DATA;

#endif // #ifndef __CUSTOMTHEME_COMMON_DEFINE_H__
