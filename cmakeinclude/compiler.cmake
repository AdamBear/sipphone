# 设置交叉编译器

# 根据机型确定CPU平台
if(NOT PLATFORM)
    if(T2XD OR DECT)
        set(PLATFORM "arm")
    elseif(T2X OR T20)
        set(PLATFORM "mipsel")
    elseif(T42 OR T46 OR T48 OR T27 OR T27G OR T69 OR CP)
        set(PLATFORM "armv6jel")
    elseif(T23)
        set(PLATFORM "armdspg")
    elseif(T49)
        set(PLATFORM "arago")
    elseif(CP920)
        set(PLATFORM "meego")
    endif()
endif()
# 设置CPU平台
string(TOLOWER "${PLATFORM}" PLATFORM)
if(PLATFORM STREQUAL "mipsel")
    set(MIPSEL ON)
    ADD_DEFINITIONS(-DIF_COMPILE_MIPSEL)
elseif(PLATFORM STREQUAL "arm")
    set(ARM ON)
    ADD_DEFINITIONS(-DIF_COMPILE_ARM)
elseif(PLATFORM STREQUAL "armv6jel")
    set(ARMV6JEL ON)
    ADD_DEFINITIONS(-DIF_COMPILE_ARMV6JEL)
    set(FEATURE_AUDIO_LOOP_TEST 1)
elseif(PLATFORM STREQUAL "armdspg")
    set(ARMDSPG ON)
    ADD_DEFINITIONS(-DIF_COMPILE_ARMDSPG)
    set(FEATURE_AUDIO_LOOP_TEST 1)
elseif(PLATFORM STREQUAL "arago")
    set(ARMARAGO ON)
    ADD_DEFINITIONS(-DIF_COMPILE_ARMARAGO)
elseif(PLATFORM STREQUAL "meego")
    set(ARMV7MEEGO ON)
    ADD_DEFINITIONS(-DIF_COMPILE_ARMV7LMEEGO)
    set(CMAKE_POSITION_INDEPENDENT_CODE ON) # 避免编译报错
elseif(PLATFORM STREQUAL "x86")
    set(X86 ON)
elseif(PLATFORM STREQUAL "win32")
    set(X86 ON)
elseif(PLATFORM STREQUAL "win64")
    set(X86 ON)
    set(CMAKE_CL_64 ON)
else()
    message(FATAL_ERROR "Unknown PLATFORM: [${PLATFORM}]")
endif()

if(NOT WIN32)
    # 根据架构确定交叉编译链前缀
    if(ARM)
        set(BUILDTOOL_PREFIX "arm-linux-gnueabi")
    elseif(MIPSEL)
        set(BUILDTOOL_PREFIX "mipsel-linux-uclibc")
    elseif(ARMV6JEL)
        set(BUILDTOOL_PREFIX "arm-wrs-linux-gnueabi-armv6jel-glibc_small")
    elseif(ARMDSPG)
        set(BUILDTOOL_PREFIX "arm-dspg-linux-uclibceabi")
    elseif(ARMARAGO)
        set(BUILDTOOL_PREFIX "arm-arago-linux-gnueabi")
    elseif(ARMV7MEEGO)
        set(BUILDTOOL_PREFIX "armv7l-meego-linux-gnueabi")
    endif()
    # 确定交叉编译程序
    if(BUILDTOOL_PREFIX)
        set(CMAKE_C_COMPILER ${BUILDTOOL_PREFIX}-gcc)
        if(NOSTD)
            set(CMAKE_CXX_COMPILER ${BUILDTOOL_PREFIX}-gcc)
        else()
            set(CMAKE_CXX_COMPILER ${BUILDTOOL_PREFIX}-g++)
        endif()
        # 以下变量必须指定CACHE，否则会在project()命令后被覆盖
        set(CMAKE_AR ${BUILDTOOL_PREFIX}-ar CACHE FILEPATH "ar")
        set(CMAKE_LINKER ${BUILDTOOL_PREFIX}-ld CACHE FILEPATH "ld")
        set(CMAKE_NM ${BUILDTOOL_PREFIX}-nm CACHE FILEPATH "nm")
        set(CMAKE_OBJCOPY ${BUILDTOOL_PREFIX}-objcopy CACHE FILEPATH "objcopy")
        set(CMAKE_OBJDUMP ${BUILDTOOL_PREFIX}-objdump CACHE FILEPATH "objdump")
        set(CMAKE_RANLIB ${BUILDTOOL_PREFIX}-ranlib CACHE FILEPATH "ranlib")
        set(CMAKE_STRIP ${BUILDTOOL_PREFIX}-strip CACHE FILEPATH "strip")
    endif()
    # ccache编译工具
    if(ENABLE_CCACHE)
        set(PRETOOL "${PRETOOL}ccache ")
    endif()
    # distcc编译工具
    if(ENABLE_DISTCC)
        set(PRETOOL "${PRETOOL}distcc ")
    endif()
    if(CMAKE_C_COMPILER AND CMAKE_CXX_COMPILER)
        # 把命令存为脚本文件(否则编译PCH的部分命令会报错)
        set(PROJECT_C_COMPILER "${CMAKE_BINARY_DIR}/CMakeFiles/c-compiler")
        set(PROJECT_CXX_COMPILER "${CMAKE_BINARY_DIR}/CMakeFiles/cxx-compiler")
        file(WRITE ${PROJECT_C_COMPILER} "${PRETOOL}${CMAKE_C_COMPILER} $*")
        file(WRITE ${PROJECT_CXX_COMPILER} "${PRETOOL}${CMAKE_CXX_COMPILER} $*")
        # 设置脚本文件运行权限
        execute_process(COMMAND chmod 700 ${PROJECT_C_COMPILER} ${PROJECT_CXX_COMPILER})
        set(CMAKE_C_COMPILER ${PROJECT_C_COMPILER})
        set(CMAKE_CXX_COMPILER ${PROJECT_CXX_COMPILER})
    endif()
endif()
